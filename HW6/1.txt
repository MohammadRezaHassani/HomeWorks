                                         توضیح سوال ۱ :

	در module views.py یا استفاده از relative addressing به آدرس سعی در دسترسی به class های 
	مد نظر car و peugeot در  module مد نظر modules داریم .
	
                         توضیح علت ایجاد Error و نحوه ی برطرف کردن آن :

	برای توضیح ایجاد علت Error ابتدا لازم است که با مفاهیم ابتدایی ای آشنا شویم .
	
	۱ـ هر module در پایتون همانند همه ی اجزای دیگر یک object بوده و این object مورد نظر 
	   دارای خصوصیات یا attribute هایی میباشد 
	
	۲ـ یکی از مهم ترین خصوصیات module ها در پایتون نام آنها بوده یا به عبارت technical 
	   ماژول ها دارای یک attribute به نام __name__ بوده که باتوجه به شیوه ی فراخوانی 
	   فایل پایتون مورد نظر مقادیر متفاوتی به خود میگیرد 
	
	۳ـ برای ران کردن یک فایل پایتون دو شیوه کلی وجود دارد 
	
		۱ـ ران کردن فایل به عنوان top level script 
		۲ـ import کردن آن فایل در درون یک فایل دیگر و استفاده از کد فایل مد نظر 
	
	۴ـ استفاده از هر یک از شیوه های بالا تغییری در مقدار attribute ما یعنی (__name__ ) 
	   ایجاد کرد که به توضیح آن خواهیم پرداخت 
	
	۵- فراخوانی یا run کردن یک فایل py. به عنوان top level script باعث میشود تا مقدار 
	   مورد نظر برای ــname__ برابر با main  شود 
	   به همین علت فراخوانی این  module ها از نقاط دیگر باعث میشود تا code های موجود در قسمت 
	   
	   if __name__ == "main"
	   اجرا نشود 
	   در واقع ما با استفاده از همین تکنیک از اجرا شدن دستورات print در کد مورد نظر خود 
	   جلوگیری کردیم 
	   چرا که فراخوانی یا import کردن این فایل ها از نقاط دیگر 
	   باعث قرار گیری مقدار متفاوتی در __name__ میگردد 
	   
	   و اما توضیح دقیق تر ایجاد error : 
	   	توجه کنید که علت ایجاد  eroor این است که هنگام استفاده از relative improt 
	   	پایتون مکانیسم الگوریتمی خاصی را در نظر میگیرد که آن را با یک مثال توضیح میدهیم 
	   	فرض کنید مادر قسمت import فایل مورد نظر خود نوشته ایم 
	   	
	import .models 
             خب اوالا این import در یک فایل py. انجام شده است 
             و اما این import چگونه صورت میپذیر 
             اتفاقی که در این جا میوفتد این است که مفسر python به نام فایل نگاه کرده 
             و به اندازه تعداد dot های گذاشته شده نام ما را اصلا میکند 
             اجازه دهید این را با یک مثال توضیح دهیم 
             فرض کنید در program.py شما فراخوانی زیر را انجام میدهید 
        
        import A.B.C from ... 
      
            با انجام فراخوانی زیر اگر در فایل مورد نظر خود دستور 
        print (__name__)
        
            را داشته باشیم خواهید دید که نام فایل ما A.B.C خواهد بود 
            حال اگر شما بنویسید 
           .D
           این جمله اینگونه تفسیر میشود که شما تا اولین دات نام را به گونه ای split کرده 
           و در واقع . خالی یعنی A.B و D. یعنی A.B.D 
           با توجه به توضیح بالا علت وقوع Error مد نظر ما کاملا مشخص میگردد چرا که 
           وقتی شما یک فایل python را به عنوان top level script ران میکنید 
           در حقیقت نام این فایل __main__ میباشد که خب با توجه به این مسئله 
           هیچ داتی برای split کردن وجود نداشته و خب به ما پیغام error میدهد 
           اما وقتی در فایل main.py مینویسیم که 
         import sample_pkg.views
         
            نام فایل ما در حقیقت sample_pkg.views خواهد بود و با توجه به همین مسئله 
            وقتی مینویسیم modles.  در حقیقت اینگونه تفسیر خواهد شد که 
     
         sample_pkg.models
           که خب این جمله جمله ی بسیار درستی میباشد و به خاطر همین پیغام خطایی دریافت نخواهیم کرد 
           
           پایان ....................
            
             
	
	
